@startuml
!include <C4/C4_Component>

' Настройки для улучшения внешнего вида
skinparam linetype ortho
skinparam ranksep 100
skinparam nodesep 80

' Принудительная вертикальная ориентация
top to bottom direction

title "C4. Компоненты ядра краудфандинговой платформы"

System_Boundary(core_services, "Ядро платформы") {
    ' API Gateway
    Container_Boundary(gateway_service, "API Gateway") {
        Component(auth_middleware, "AuthMiddleware", "Spring Security", "Проверка и валидация JWT токенов")
        Component(rate_limiter, "RateLimiter", "Spring Cloud Gateway", "Ограничение количества запросов")
        Component(route_handler, "RouteHandler", "Spring Cloud Gateway", "Маршрутизация запросов")
    }

    ' Auth Service
    Container_Boundary(auth_service, "Auth Service") {
        Component(auth_controller, "AuthController", "REST API", "Аутентификация и авторизация")
        Component(user_controller, "UserController", "REST API", "Управление пользователями")
        Component(auth_service_impl, "AuthService", "Service", "Бизнес-логика авторизации")
        Component(user_service_impl, "UserService", "Service", "Управление пользователями")
        Component(jwt_service, "JWTService", "Service", "Работа с токенами")
        Component(user_repository, "UserRepository", "Repository", "Доступ к данным пользователей")
    }

    ' Project Service
    Container_Boundary(project_service, "Project Service") {
        Component(project_controller, "ProjectController", "REST API", "Управление проектами")
        Component(category_controller, "CategoryController", "REST API", "Управление категориями")
        Component(project_service_impl, "ProjectService", "Service", "Бизнес-логика проектов")
        Component(category_service_impl, "CategoryService", "Service", "Управление категориями")
        Component(project_repository, "ProjectRepository", "Repository", "Доступ к данным проектов")
        Component(category_repository, "CategoryRepository", "Repository", "Доступ к данным категорий")
    }

    ' Payment Service
    Container_Boundary(payment_service, "Payment Service") {
        Component(payment_controller, "PaymentController", "REST API", "Обработка платежей")
        Component(transaction_controller, "TransactionController", "REST API", "Управление транзакциями")
        Component(payment_service_impl, "PaymentService", "Service", "Бизнес-логика платежей")
        Component(transaction_service_impl, "TransactionService", "Service", "Управление транзакциями")
        Component(payment_repository, "PaymentRepository", "Repository", "Доступ к данным платежей")
        Component(payment_gateway_client, "PaymentGatewayClient", "Client", "Интеграция с платежной системой")
    }
}

' Внешние системы
System_Ext(payment_gateway, "Payment Gateway", "Внешняя платежная система")
ContainerDb(main_db, "Main Database", "PostgreSQL", "Основное хранилище данных")
ContainerDb(cache, "Cache", "Redis", "Кэширование данных")
Container(kafka, "Message Broker", "Kafka", "Обмен событиями")

' Связи между компонентами API Gateway
Rel_D(auth_middleware, route_handler, "Передает запрос после проверки")
Rel_D(rate_limiter, route_handler, "Передает запрос после проверки лимитов")

' Связи Auth Service
Rel_D(auth_controller, auth_service_impl, "Использует")
Rel_D(user_controller, user_service_impl, "Использует")
Rel_D(auth_service_impl, jwt_service, "Использует")
Rel_D(auth_service_impl, user_repository, "Использует")
Rel_D(user_service_impl, user_repository, "Использует")

' Связи Project Service
Rel_D(project_controller, project_service_impl, "Использует")
Rel_D(category_controller, category_service_impl, "Использует")
Rel_D(project_service_impl, project_repository, "Использует")
Rel_D(category_service_impl, category_repository, "Использует")

' Связи Payment Service
Rel_D(payment_controller, payment_service_impl, "Использует")
Rel_D(transaction_controller, transaction_service_impl, "Использует")
Rel_D(payment_service_impl, payment_repository, "Использует")
Rel_D(transaction_service_impl, payment_repository, "Использует")
Rel_R(payment_gateway_client, payment_gateway, "Отправляет запросы")

' Связи с базами данных
Rel_D(user_repository, main_db, "Читает/Пишет")
Rel_D(project_repository, main_db, "Читает/Пишет")
Rel_D(category_repository, main_db, "Читает/Пишет")
Rel_D(payment_repository, main_db, "Читает/Пишет")

' Связи с кэшем
Rel_R(auth_service_impl, cache, "Кэширует токены")
Rel_R(project_service_impl, cache, "Кэширует проекты")

' Связи с Kafka
Rel_L(payment_service_impl, kafka, "Публикует события платежей")
Rel_L(project_service_impl, kafka, "Публикует события проектов")

@enduml
